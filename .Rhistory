#      ylab = "Temporal correlation",
#      main = "Fit vs Data"
# )
#
# # Add the fitted values to the plot
# lines(acf.cell$lag, predicted, col = "red")
T <- -1/fit1$coefficients[1]
return(T)
}
T <- vector(length = n)
for (c in 1:n)
{
T[c] <- calc_T(errmat[c,])
}
mean(T,na.rm=TRUE)
summary(T)
hist(T, "fd")
T
warnings()
calc_T <- function(ts)
{
nt <- 365
acf.cell <- acf(as.data.frame(ts), plot=FALSE)
# Keep only significant lag correlations (if desired)
consecutive_numbers <- which(acf.cell$acf>2/sqrt(nt))
# For white noise, 95% of ACF values should be in ±2/√T, where T = 365
maxlag <- which(diff(consecutive_numbers)>1)[1]
if (is.na(maxlag))
{
maxlag <- consecutive_numbers[length(consecutive_numbers)]
}
acf.cell <- acf.cell[0:maxlag,]
# Fit a correlation function of the form rho(tau) = exp(-tau/T)
acf.cell.data <- data.frame(lag = acf.cell$lag,
acf = acf.cell$acf
)
fit1 <- lm(log(acf)~lag+0, acf.cell.data)
# summary(fit1)
# Obtain the predicted values from the linear regression model
predicted <- exp(predict(fit1))
# # Create a scatter plot of the original data
# plot(acf.cell$lag, acf.cell$acf,
#      xlab = "lag",
#      ylab = "Temporal correlation",
#      main = "Fit vs Data"
# )
#
# # Add the fitted values to the plot
# lines(acf.cell$lag, predicted, col = "red")
T <- -1/fit1$coefficients[1]
return(T)
}
T <- vector(length = n)
for (c in 1:n)
{
T[c] <- calc_T(errmat[c,])
}
T
hist(T)
summary(T)
hist(T, "fd")
distmat <- read.table("./ohio_data/distmat.txt",
header = FALSE)
distmat <- read.table("./hh_data/distmat.txt",
header = FALSE)
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
calc_L <- function(runoff_error_snapshot)
{
# runoff_error_snapshot <- "./ohio_data/runoff_error_xyz/xyz1.txt"
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
variogram_model <- variogram(err ~ 1, data = spdf)
# plot(variogram_model, xlab = "distance (km)")
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", nugget = 0))
L <- vfit$range[2] # km
# plot(vfit)
return(L)
}
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
warnings()
xyz
runoff_error_snapshot
tt=300
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
runoff_error_snapshot
plot(runoff_error_snapshot)
runoff_error_snapshot
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
plot(xyz)
xyz
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
plot(xyz)
plot(spdf)
spplot(spdf)
variogram_model <- variogram(err ~ 1, data = spdf)
variogram_model
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", nugget = 0))
plot(variogram_model, xlab = "distance (km)")
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", nugget = 1))
?vgm
vfit <- fit.variogram(variogram_model,
model = vgm("Exp")
L <- vfit$range[2] # km
# plot(vfit)
return(L)
}
vfit <- fit.variogram(variogram_model,
model = vgm("Exp"))
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", psill = 3, range = 12, nugget = 0))
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", psill = 3, range = 12, nugget = 1))
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", psill = 3, range = 12),
)
vfit <- fit.variogram(variogram_model,
model = vgm("Sph", psill = 3, range = 12),
)
L <- vfit$range[2] # km
plot(vfit)
plot(vfit, cutoff = 15)
plot(vfit, cutoff = 15, add=TRUE)
plot(variogram_model, xlab = "distance (km)")
plot(vfit, cutoff = 15, add=TRUE)
plot(variogram_model, xlab = "distance (km)", add = TRUE)
points(variogram_model, xlab = "distance (km)")
plot(vfit, cutoff = 15, add=TRUE)
points(variogram_model, xlab = "distance (km)")
plot(variogram_model, xlab = "distance (km)")
plot(variogram_model, xlab = "distance (km)")
plot(vfit, cutoff = 15, add=TRUE)
plot(variogram_model, xlab = "distance (km)")
lines(vfit, col = "red", lwd = 2)
# Plot the experimental variogram
ggplot(variogram_model, aes(x = distance, y = gamma)) +
geom_line(color = "blue") +
ylim(0, max(variogram_model$gamma) + 5) +
xlab("distance (km)") +
ylab("gamma")
library(ggplot2)
# Plot the experimental variogram
ggplot(variogram_model, aes(x = distance, y = gamma)) +
geom_line(color = "blue") +
ylim(0, max(variogram_model$gamma) + 5) +
xlab("distance (km)") +
ylab("gamma")
variogram_model$gamma
# Plot the experimental variogram
ggplot(variogram_model, aes(x = dist, y = gamma)) +
geom_line(color = "blue") +
ylim(0, max(variogram_model$gamma) + 5) +
xlab("distance (km)") +
ylab("gamma")
# Add the fitted variogram to the plot
ggplot() +
geom_line(data = exp_vario, aes(x = dist, y = gamma), color = "blue") +
geom_line(data = fit_vario, aes(x = dist, y = gamma), color = "red", size = 1.5) +
ylim(0, max(variogram_model$gamma) + 5) +
xlab("distance (km)") +
ylab("gamma")
# Add the fitted variogram to the plot
ggplot() +
geom_line(data = variogram_model, aes(x = dist, y = gamma), color = "blue") +
geom_line(data = vfit, aes(x = dist, y = gamma), color = "red", size = 1.5) +
ylim(0, max(variogram_model$gamma) + 5) +
xlab("distance (km)") +
ylab("gamma")
vfit$model
str(vfit)
plot(vfit)
plot(vfit, cutoff = 1)
plot(vfit, cutoff = 100)
plot(vfit, cutoff = 15)
plot(vfit, cutoff = 12)
vfit <- fit.variogram(variogram_model,
model = vgm("Exp", psill = 3, range = 12),
)
vgm.control(maxit = 1000)
vfit <- fit.variogram(variogram_model,
model = vgm(nugget = 0, "Exp", psill = 3, range = 12),
)
?vgm
vfit <- fit.variogram(variogram_model,
model = vgm(nugget = 0, model = "Exp", psill = 3, range = 12),
)
# plot(vfit, cutoff = 15, add=TRUE)
plot(variogram_model, vfit)
vfit <- fit.variogram(variogram_model,
model = vgm(nugget = 0, model = "Exp", psill = 3, range = 5),
)
vfit <- fit.variogram(variogram_model,
model = vgm(nugget = 1, model = "Exp", psill = 3, range = 5),
)
vfit <- fit.variogram(variogram_model,
model = vgm(nugget = 1, model = "Exp", psill = 2, range = 5),
)
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Exp", psill = 2, range = 5),
)
fit.variogram
vgm
set iter=20
set
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Exp", psill = 2, range = 5),
set=list(iter=100)
)
fulmar
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Sph", psill = 2, range = 5)
)
vfit
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Gau", psill = 2, range = 5)
)
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Mat", psill = 2, range = 5)
)
fit.variogram()
vgm()
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Cir", psill = 2, range = 5)
)
vfit
# plot(vfit, cutoff = 15, add=TRUE)
plot(variogram_model, vfit)
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Sph", psill = 2, range = 5)
)
# plot(vfit, cutoff = 15, add=TRUE)
plot(variogram_model, vfit)
vfit$range
calc_L <- function(runoff_error_snapshot)
{
# runoff_error_snapshot <- "./ohio_data/runoff_error_xyz/xyz1.txt"
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
variogram_model <- variogram(err ~ 1, data = spdf)
# plot(variogram_model, xlab = "distance (km)")
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Sph", psill = 2, range = 5)
)
L <- vfit$range[1] # km
# plot(vfit, cutoff = 15, add=TRUE)
# plot(variogram_model, vfit)
return(L)
}
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
L
tt
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
variogram_model <- variogram(err ~ 1, data = spdf)
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Sph", psill = 2, range = 5)
)
plot(variogram_model, vfit)
vfit
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Sph")
)
vift
vfit
plot(variogram_model, vfit)
calc_L <- function(runoff_error_snapshot)
{
# runoff_error_snapshot <- "./ohio_data/runoff_error_xyz/xyz1.txt"
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
variogram_model <- variogram(err ~ 1, data = spdf)
# plot(variogram_model, xlab = "distance (km)")
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Sph")
)
L <- vfit$range[1] # km
# plot(vfit, cutoff = 15, add=TRUE)
# plot(variogram_model, vfit)
return(L)
}
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
summary(L)
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Exp")
)
vfit
plot(variogram_model, vfit)
calc_L <- function(runoff_error_snapshot)
{
# runoff_error_snapshot <- "./ohio_data/runoff_error_xyz/xyz1.txt"
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
variogram_model <- variogram(err ~ 1, data = spdf)
# plot(variogram_model, xlab = "distance (km)")
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Exp")
)
L <- vfit$range[1] # km
# plot(vfit, cutoff = 15, add=TRUE)
# plot(variogram_model, vfit)
return(L)
}
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
summary(L)
hist(L,"FD")
rm(list=ls())
library(sp)
library(gstat)
library(rgdal)
setwd("/hdd/ISR/inverse_streamflow_routing")
err <- as.matrix(read.table("./hh_data/uncorr_prior_error.txt",
header = FALSE
))
# Determine the dimensions of the 2D matrix
nr <- 6
nc <- 7
nt <- 721
# Reconstruct the 3D array from the 2D matrix
err.3D <- array(err, dim = c(nr, nc, nt))
gi <- which(!is.na(err.3D[,,1]), arr.ind = TRUE) # index of cells in basin
n <- length(gi[,1]) # number of grid cells in basin
errmat <- matrix(0, nrow = n, ncol = nt)
for (i in 1:n)
{
errmat[i,] <- err.3D[gi[i,1], gi[i,2],]
}
errdf <- as.data.frame(t(errmat))
tv <- seq(from = as.POSIXct("2006-05-01 00:00:00"),
by = "hour",
length.out = nt)
errdf <- cbind(tv, errdf)
colnames(errdf) <- c("Time", paste0("Cell_", 1:n))
maxlag <- vector(length = n)
maxlag <- vector(length = n)
for (c in 1:n)
{
val <- acf(errdf[,c+1], plot = FALSE)
consecutive_numbers <- which(val$acf>2/sqrt(nt))
# For white noise, 95% of ACF values should be in ±2/√T, where T = 365
maxlag[c] <- which(diff(consecutive_numbers)>1)[1]
if (is.na(maxlag[c]))
{
maxlag[c] <- consecutive_numbers[length(consecutive_numbers)]
}
}
maxlag
# Plot ACF for a particular cell
val <- acf(errdf[,4], plot = TRUE)
# ACF for basin average (and lag)
err.basin.avg <- colMeans(errmat)
acf.basin.avg <- acf(as.data.frame(err.basin.avg), plot=TRUE)
# Fit a correlation function of the form rho(tau) = exp(-tau/T)
acf.fit.data <- data.frame(lag = acf.basin.avg$lag,
acf = acf.basin.avg$acf,
logacf = log(acf.basin.avg$acf)
)
fit1 <- lm(log(acf)~lag+0, acf.fit.data)
summary(fit1)
# Obtain the predicted values from the linear regression model
predicted <- exp(predict(fit1))
# Create a scatter plot of the original data
plot(acf.basin.avg$lag, acf.basin.avg$acf,
xlab = "lag",
ylab = "Temporal correlation",
main = "Fit vs Data"
)
# Add the fitted values to the plot
lines(acf.basin.avg$lag, predicted, col = "red")
T.basin.avg <- -1/fit1$coefficients[1]
calc_T <- function(ts)
{
nt <- 365
acf.cell <- acf(as.data.frame(ts), plot=FALSE)
# Keep only significant lag correlations (if desired)
consecutive_numbers <- which(acf.cell$acf>2/sqrt(nt))
# For white noise, 95% of ACF values should be in ±2/√T, where T = 365
maxlag <- which(diff(consecutive_numbers)>1)[1]
if (is.na(maxlag))
{
maxlag <- consecutive_numbers[length(consecutive_numbers)]
}
acf.cell <- acf.cell[0:maxlag,]
# Fit a correlation function of the form rho(tau) = exp(-tau/T)
acf.cell.data <- data.frame(lag = acf.cell$lag,
acf = acf.cell$acf
)
fit1 <- lm(log(acf)~lag+0, acf.cell.data)
# summary(fit1)
# Obtain the predicted values from the linear regression model
predicted <- exp(predict(fit1))
# # Create a scatter plot of the original data
# plot(acf.cell$lag, acf.cell$acf,
#      xlab = "lag",
#      ylab = "Temporal correlation",
#      main = "Fit vs Data"
# )
#
# # Add the fitted values to the plot
# lines(acf.cell$lag, predicted, col = "red")
T <- -1/fit1$coefficients[1]
return(T)
}
T <- vector(length = n)
for (c in 1:n)
{
T[c] <- calc_T(errmat[c,])
}
warnings()
mean(T,na.rm=TRUE)
summary(T)
hist(T, "fd")
RT
T
distmat <- read.table("./hh_data/distmat.txt",
header = FALSE)
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/dbltruth_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
summary(L)
hist(L, "FD")
calc_L <- function(runoff_error_snapshot)
{
# runoff_error_snapshot <- "./ohio_data/runoff_error_xyz/xyz1.txt"
xyz <- read.table(runoff_error_snapshot,
header = FALSE, col.names = c("lon","lat","err"))
spdf <- data.frame(lon = xyz$lon, lat = xyz$lat, err = xyz$err)
coordinates(spdf) <- c("lon", "lat")
crs <- CRS("+proj=longlat +datum=WGS84")
# Assign the CRS to the spdf object
proj4string(spdf) <- crs
variogram_model <- variogram(err ~ 1, data = spdf)
# plot(variogram_model, xlab = "distance (km)")
vfit <- fit.variogram(variogram_model,
model = vgm(model = "Exp")
)
L <- vfit$range[1] # km
# plot(vfit, cutoff = 15, add=TRUE)
# plot(variogram_model, vfit)
return(L)
}
L <- vector(length = nt)
for (tt in 1:nt)
{
runoff_error_snapshot <- paste0("./hh_data/runoff_error_xyz/uncorr_xyz", tt, ".txt")
L[tt] <- calc_L(runoff_error_snapshot)
}
warnings()
vfit
L
hist(L, "FD")
summary(L)
quit()
