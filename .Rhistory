library(raster)
library(rgdal)
library(ncdf4)
install.packages("raster")
which R
?nc_open
install.packages((ncdf4))
install.packages("gsts")
install.packages("gstats")
install.packages("gstat")
quit
quit()
installed.packages()
library(tools)
install.packages("devtools")
install.packages("raster")
plot(1,1)
quit()
plot(1,1)
install.packages("gstat")
install.packages("raster")
library(stringr)
options(repos='http://cran.rstudio.com/')
1
install.packages("rgeos")
library(rgeos)
install.packages("gstat")
quit()
library(raster)
r=raster("/home/jschap/Documents/ISR/Ohio/data/oh.dir")
install.packages("rgdal")
library(covatest)
install.packages("covatest")
# Get old packages back:
old.packages()
update.packages(ask = FALSE, checkBuilt = TRUE)
library(covatest)
library(gstat)
library(CoSMoS)
?variogramST
X <- matrix(data = 1,2,9,2,3,9,3,4,3,4,4,3,5,1,3, nrow = 5, ncol = 3)
X <- matrix(data = c(1,2,9,2,3,9,3,4,3,4,4,3,5,1,3), nrow = 5, ncol = 3)
X
X <- matrix(data = c(1,2,9,2,3,9,3,4,3,4,4,3,5,1,3), nrow = 5, ncol = 3, byrow = FALSE)
X
X <- matrix(data = c(1,2,9,2,3,9,3,4,3,4,4,3,5,1,3), nrow = 5, ncol = 3, byrow = TRUE)
X
13*730
# Five points, three observations
data.frame(X)
?va
?var
rm(list=ls())
library(sp)
library(spacetime)
library(gstat)
library(covatest)
data("air")
if (!exists("rural"))
{
rural <- STFDF(stations, dates, + data.frame(PM10 = as.vector(air)))
}
rural
rr <- rural[,"2005::2010"]
rr
unsel <- which(apply(as(rr, "xts"), 2, function(x) all(is.na(x))))
r5to10 <- rr[-unsel,]
rr_13 <- r5to10[c("DEHE046","DESN049","DETH026","DENW063","DETH061",
+ "DEBY047", "DENW065","DEUB029","DENW068","DENI019","DEHE051",
+ "DERP016", "DENI051"), "2005::2006"]
r5to10[]
names(r5to10)
str(r5to10)
rr_13 <- r5to10[c("DEHE046","DESN049","DETH026","DENW063","DETH061", "DEBY047", "DENW065","DEUB029","DENW068","DENI019","DEHE051","DERP016", "DENI051"), "2005::2006"]
rr_13
C_00 <- var(rr_13[,,"PM10"]@data[[1]], na.rm = TRUE)
C_00
rr_13[,,"PM10"]
dim(rr_13[,,"PM10"])
rr_13[,,"PM10"]@data
rr_13[,,"PM10"]@data[[2]]
rr_13[,,"PM10"]@data[[1]]
class(rr_13[,,"PM10"]@data[[1]])
typeof(rr_13[,,"PM10"]@data[[1]])
dim(rr_13[,,"PM10"]@data[[1]])
length(rr_13[,,"PM10"]@data[[1]])
X
# Generate some sample data
X <- matrix(data = c(1,2,9,2,3,9,3,4,3,4,4,3,5,1,3),
nrow = 5,
ncol = 3,
byrow = TRUE
)
values(X)
X
C_00 <- var(X, na.rm = TRUE)
C_00
as.vector(X)
# Calculate global sill (variance)
C_00 <- var(as.vector(X), na.rm = TRUE)
C_00
C_00 <- var(rr_13[,,"PM10"]@data[[1]], na.rm = TRUE)
vv_13 <- variogramST(PM10~1, rr_13, width=60, cutoff = 220, tlags=0:15)
vv_13
class(vv_13)
typoe(vv_13)
typeof(vv_13)
rr_13$PM10
dim(rr_13$PM10)
length(rr_13$PM10)
class(rr_13$PM10)
typeof(rr_13$PM10)
X
?STFDF
class(dates)
stations
plot(stations)
?coordinates
coord1 <- matrix(data = c(1,2,3,4,5,1,1,1,1,1))
coord1
coord1 <- matrix(data = c(1,2,3,4,5,1,1,1,1,1), nrow = 5, ncol = 2)
coord1
names(coord1) <- c("lon","lat")
coord1
coord1 <- matrix(data = c(1,2,3,4,5,1,1,1,1,1), nrow = 5, ncol = 2)
coord1 <- as.data.frame(coord1)
names(coord1) <- c("lon","lat")
coord1
coordinates(coord1) <- ~lon + lat
coord1
plot(coord1)
crs(coord1) <- "+init=epsg:4326"
CRS(coord1) <- "+init=epsg:4326"
library(raster)
crs(coord1) <- "+init=epsg:4326"
coord1
plot(coord1)
library(lubridate)
dates[1:3]
class(dates)
typoe(dates)
typeof(dates)
as.Date("1998-01-01")
typeof(as.Date("1998-01-01"))
class(as.Date("1998-01-01"))
# Times in time
dates1 <- as.Date(c("1998-01-01", "1998-01-02", "1998-01-03"))
dates1
X
PM10
as.vector(air)
length(as.vector(air))
Xdf <- STFDF(stations, dates, data.frame(X = as.vector(X)))
Xdf <- STFDF(coord1, dates1, data.frame(X = as.vector(X)))
Xdf
C_00
# Calculate global sill (variance)
C_00 <- var(as.vector(X), na.rm = TRUE)
C_00
C_00 <- var(Xdf[,,"X"]@data[[1]], na.rm = TRUE)
C_00
vv_13 <- variogramST(X~1, Xdf, cutoff = 5, tlags=0:1)
vv_13
vv_13 <- variogramST(X~1, Xdf, cutoff = 5, tlags=0)
vv_13
vv_13 <- variogramST(X~1, Xdf, cutoff = 2, tlags=0)
vv_13 <- variogramST(X~1, Xdf, cutoff = 2, tlags=0)
vv_13
vv_13 <- variogramST(X~1, Xdf, cutoff = 60, tlags=0)
vv_13
vv_13 <- variogramST(X~1, Xdf, cutoff = 1, tlags=0)
vv_13 <- variogramST(X~1, Xdf, cutoff = 1, tlags=0)
vv_13
?variogramST
# Estimate space-time variogram
vv_13 <- variogramST(X~1, Xdf, cutoff = 5, width = 1, tlags=0:1)
vv_13
# Estimate space-time variogram
vv_13 <- variogramST(X~1, Xdf, cutoff = 5, width = 2, tlags=0:1)
vv_13
# Estimate space-time variogram
vv_13 <- variogramST(X~1, Xdf, cutoff = 5, width = 15, tlags=0:1, na.omit = TRUE)
# Estimate space-time variogram
vv_13 <- variogramST(X~1, Xdf, cutoff = 5, width = 1, tlags=0:1, na.omit = TRUE)
vv_13
library(lattice)
# Plot the space-time variogram
plot(vv_13,
wireframe = T,
zlab = NULL,
xlab = list("distance (km)", rot = 30),
ylab = list("time lag (days)", rot = -35),
scales = list(arrows = F, z = list(distance = 5))
)
?lattice::plot
?lattice:plot
?plot
# Plot the space-time variogram
plot(vv_13,
wireframe = T,
zlab = NULL,
xlab = list("distance (km)", rot = 30),
ylab = list("time lag (days)", rot = -35)
)
# Plot the space-time variogram
xyplot(vv_13,
wireframe = T,
zlab = NULL,
xlab = list("distance (km)", rot = 30),
ylab = list("time lag (days)", rot = -35)
)
plot(vv_13)
plot(vv_13, wireframe = TRUE)
# Plot the space-time variogram
plot(vv_13, main = "Space-time variogram")
?variogramST
vv_13$gamma
names(vv_13)
vv_13$cov <- C_00 - vv_13$gamma
plot(vv_13)
vv_13
vargioranm
variogramST
StVgmLag
open variogramST
open(variogramST)
open("variogramST")
edit
edit(variogramST)
library(CoSMoS)
install.packages("CoSMoS")
library(gstat)
library(CoSMoS)
# Simulate a time series of error
n <- 365 # sample size/number of time steps
library(CoSMoS)
install.packages("CoSMoS")
install.packages("CoSMoS")
library(CoSMoS)
# Simulate a time series of error
n <- 365 # sample size/number of time steps
-----------------------------
# Determining parameters
mean1 <- 1;
-----------------------------
# Determining parameters
mean1 <- 1;
Cv <- 1;
-----------------------------
# Determining parameters
mean1 <- 1;
Cv <- 1;
-----------------------------
# Determining parameters
mean1 <- 1;
-----------------------------
# Determining parameters
mean1 <- 1
mean1<-1
Cv <- 1;
mu1 <- log((mean1^2)/sqrt(Cv^2+mean1^2));
sigma1 = sqrt(log(Cv^2/(mean1^2)+1));
Astar <- sqrt(33750)
Lstar <- sqrt(33750)
Lval <- Lstar/(111/8) # grid cells
Lval
Lval <- round(Lstar/(111/8)) # grid cells
Lval
ns <- 21
pwd
getwd()
# takes about 30 minutes per replicate on my computer
# requires about 12 GB of RAM
for (mm in 1:10)
{
rf_sim <- generateRFFast(n = 365, spacepoints = ns, p0 = 0,
margdist ="lnorm",
margarg = list(meanlog = mu1, sdlog = sigma1),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = Lval, shape = 1), # scale = L
tcfarg = list(scale = Tval, shape = 1)) # scale = T
)
write.table(as.matrix(rf_sim),
file = paste0("./alleg_err_sim_", mm, ".txt"),
# file = paste0("/media/jschap/HD_ExFAT/Ohio/initial_runoff/cosmos_errors/Case4/sim_", mm, ".txt"),
sep = ",",
row.names = FALSE, col.names = FALSE
)
}
Tval <- 4 # days (time of concentration)
ns <- 21
# takes about 30 minutes per replicate on my computer
# requires about 12 GB of RAM
for (mm in 1:10)
{
rf_sim <- generateRFFast(n = 365, spacepoints = ns, p0 = 0,
margdist ="lnorm",
margarg = list(meanlog = mu1, sdlog = sigma1),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = Lval, shape = 1), # scale = L
tcfarg = list(scale = Tval, shape = 1)) # scale = T
)
write.table(as.matrix(rf_sim),
file = paste0("./alleg_err_sim_", mm, ".txt"),
# file = paste0("/media/jschap/HD_ExFAT/Ohio/initial_runoff/cosmos_errors/Case4/sim_", mm, ".txt"),
sep = ",",
row.names = FALSE, col.names = FALSE
)
}
# takes about 30 minutes per replicate on my computer
# requires about 12 GB of RAM
for (mm in 1:200)
{
rf_sim <- generateRFFast(n = 365, spacepoints = ns, p0 = 0,
margdist ="lnorm",
margarg = list(meanlog = mu1, sdlog = sigma1),
stcsarg = list(scfid = "weibull", tcfid = "weibull",
scfarg = list(scale = Lval, shape = 1), # scale = L
tcfarg = list(scale = Tval, shape = 1)) # scale = T
)
write.table(as.matrix(rf_sim),
file = paste0("./alleg_err_sim_", mm, ".txt"),
# file = paste0("/media/jschap/HD_ExFAT/Ohio/initial_runoff/cosmos_errors/Case4/sim_", mm, ".txt"),
sep = ",",
row.names = FALSE, col.names = FALSE
)
}
source("~/Documents/ISR/Allegheny/sim_runoff_error_allegheny.R")
source("~/Documents/ISR/Allegheny/sim_runoff_error_allegheny.R")
-----------------------------
#
mean1<-1
-----------------------------
Cv <- 1; mean1<-1;
source("~/Documents/ISR/Allegheny/sim_runoff_error_allegheny.R")
source("~/Documents/ISR/Allegheny/sim_runoff_error_allegheny.R")
source("~/Documents/ISR/Allegheny/sim_runoff_error_allegheny.R")
source("~/Documents/ISR/Allegheny/sim_runoff_error_allegheny.R")
setwd("/home/jschap/Documents/ISR/inverse_streamflow_routing/allegheny_scripts/new/")
library(gstat)
library(CoSMoS)
# Simulate a time series of error
n <- 90 # sample size/number of time steps
# Determining parameters
mean1=1
Cv <- 1
mu1 <- log((mean1^2)/sqrt(Cv^2+mean1^2));
sigma1 = sqrt(log(Cv^2/(mean1^2)+1));
mu
mu1
sigma1
40/12.31
Lval <- 3.249391 # grid cells (40 km)
Tval <- 5 # days
getwd()
setwd("/home/jschap/Documents/ISR/inverse_streamflow_routing/")
source("~/Documents/ISR/inverse_streamflow_routing/allegheny_scripts/new/sim_runoff_error.R")
source("~/Documents/ISR/inverse_streamflow_routing/allegheny_scripts/new/sim_runoff_error.R")
quit()
